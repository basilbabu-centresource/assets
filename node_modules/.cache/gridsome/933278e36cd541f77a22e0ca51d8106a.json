{"remainingRequest":"/home/blesy/Desktop/assets/node_modules/babel-loader/lib/index.js??ref--1-1!/home/blesy/Desktop/assets/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/blesy/Desktop/assets/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/blesy/Desktop/assets/src/components/ContactForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/blesy/Desktop/assets/src/components/ContactForm.vue","mtime":1619525747649},{"path":"/home/blesy/Desktop/assets/node_modules/cache-loader/dist/cjs.js","mtime":1619525890957},{"path":"/home/blesy/Desktop/assets/node_modules/babel-loader/lib/index.js","mtime":1619525890949},{"path":"/home/blesy/Desktop/assets/node_modules/cache-loader/dist/cjs.js","mtime":1619525890957},{"path":"/home/blesy/Desktop/assets/node_modules/vue-loader/lib/index.js","mtime":1619525893783}],"contextDependencies":[],"result":["import \"core-js/modules/es.date.to-string\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.string.match\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/web.timers\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/blesy/Desktop/assets/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/blesy/Desktop/assets/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { extend, ValidationObserver, ValidationProvider } from \"vee-validate\";\nimport { email, numeric, required } from \"vee-validate/dist/rules\";\nimport { captchaDataVar, captchaRender, captchaResponse, captchaReady } from \"../utils/custom\"; // import Notifications from 'vue-notification/dist/ssr.js'\n\nextend(\"fullName\", _objectSpread(_objectSpread({}, required), {}, {\n  message: \"Full Name is required\"\n}));\nextend(\"emailId\", _objectSpread(_objectSpread({}, required), {}, {\n  message: \"Email Id is required\"\n}));\nextend(\"email\", _objectSpread(_objectSpread({}, email), {}, {\n  message: \"Enter a valid email\"\n}));\nextend(\"numeric\", _objectSpread(_objectSpread({}, numeric), {}, {\n  message: \"Enter a valid Phone Number\"\n}));\nextend(\"Phone\", _objectSpread(_objectSpread({}, required), {}, {\n  message: \"Phone Number is required\"\n}));\nexport default {\n  name: \"ContactForm\",\n  props: {\n    item: {\n      title: \"test success\"\n    },\n    messageData: String\n  },\n  components: {\n    ValidationProvider: ValidationProvider,\n    ValidationObserver: ValidationObserver\n  },\n  data: function data() {\n    return _objectSpread({\n      formKey: 898888888,\n      dateKey: new Date().getMinutes(),\n      captchaToken: \"\",\n      contact: {\n        full_name: \"\",\n        email: \"\",\n        mobile: \"\"\n      },\n      valueKey: \"\",\n      isError: false\n    }, captchaDataVar);\n  },\n  mounted: function mounted() {\n    var localThis = this;\n    this.checkingInterval = setInterval(function () {\n      if (window.grecaptcha) {\n        localThis.captchaReady = true;\n      }\n    }, 500);\n  },\n  watch: {\n    captchaReady: captchaReady\n  },\n  methods: {\n    captchaResponse: captchaResponse,\n    captchaRender: captchaRender,\n    onSubmitData: function onSubmitData() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.contact = {\n                  full_name: _this.contact.full_name,\n                  email: _this.contact.email,\n                  mobile: _this.contact.mobile,\n                  recaptcha: _this.captchaToken // recaptcha:grecaptcha.getResponse()\n\n                };\n                console.log(_this.contact);\n\n                _this.$emit(\"onContactFormSubmit\", _this.contact);\n\n                setTimeout(function () {\n                  if (_this.messageData === \"Successs save\") {\n                    _this.isError = false;\n\n                    _this.showToast();\n                  } else {\n                    _this.isError = true;\n\n                    _this.showErrorToast(_this.messageData);\n                  }\n                }, 1000);\n                _this.contact = {};\n\n                _this.$refs.observer.reset();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    showToast: function showToast() {\n      this.$notify({\n        type: \"success\",\n        group: \"foo\",\n        title: \"Contact Form\",\n        duration: 3000,\n        width: \"200px\",\n        position: \"center\",\n        text: \"Successfully submitted Contact Form!\"\n      });\n    },\n    showErrorToast: function showErrorToast(value) {\n      this.$notify({\n        type: \"error\",\n        group: \"foo\",\n        title: \"Failed\",\n        duration: 3000,\n        width: \"200px\",\n        position: \"center\",\n        text: value\n      });\n    },\n    acceptNumber: function acceptNumber() {\n      var x = this.valueKey.replace(/\\D/g, \"\").match(/(\\d{0,3})(\\d{0,3})(\\d{0,4})/);\n      this.value = !x[2] ? x[1] : \"(\" + x[1] + \") \" + x[2] + (x[3] ? \"-\" + x[3] : \"\");\n    },\n    isLetter: function isLetter(e) {\n      var _char = String.fromCharCode(e.keyCode); // Get the character\n\n\n      if (/^[A-Za-z]+$/.test(_char)) return true; // Match with regex\n      else e.preventDefault(); // If not match, don't add to input text\n    }\n  }\n};",{"version":3,"sources":["ContactForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <ValidationObserver v-slot=\"{ handleSubmit }\" ref=\"observer\">\n        <form action=\"\" @submit.prevent=\"handleSubmit(onSubmitData)\">\n            <validation-provider rules=\"fullName\" v-slot=\"{ errors }\">\n                <div class=\"field-outer\">\n                    <input\n                            type=\"text\"\n                            v-model=\"contact.full_name\"\n                            name=\"full_name\"\n                            maxlength=\"20\"\n                            placeholder=\"Your Full Name\"\n                            v-on:keypress=\"isLetter($event)\"\n                    />\n                    <span class=\"error-span error-message\">{{ errors[0] }}</span>\n                </div>\n            </validation-provider>\n\n            <validation-provider rules=\"emailId|email\" v-slot=\"{ errors }\">\n                <div class=\"field-outer\">\n                    <input\n                            v-model=\"contact.email\"\n                            name=\"email\"\n                            type=\"email\"\n                            maxlength=\"30\"\n                            placeholder=\"Your Email Address\"\n                    />\n                    <span class=\"error-span error-message\">{{ errors[0] }}</span>\n                </div>\n            </validation-provider>\n\n            <validation-provider rules=\"Phone|numeric\" v-slot=\"{ errors }\">\n                <div class=\"field-outer\">\n                    <input\n                            v-model=\"contact.mobile\"\n                            name=\"mobile\"\n                            type=\"text\"\n                            @input=\"acceptNumber\"\n                            maxlength=\"10\"\n                            placeholder=\"Your Phone Number\"\n                    />\n                    <span class=\"error-span error-message\">{{ errors[0] }}</span>\n                </div>\n            </validation-provider>\n            <!-- <div class=\"field-outer\">\n                      <div  id=\"g-captcha-contact-form\"></div>\n                  </div> -->\n            <div class=\"field-outer\">\n                <div :id=\"'g-captcha-contact-form' + formKey \"></div>\n            </div>\n\n            <input type=\"submit\" value=\"Submit\"/>\n            <notifications group=\"foo\" class=\"vue-notification\"\n                           :style=\"[isError ?{'background': '#960909','border-left': '5px solid #960909'}:{'background':'green','border-left': '5px solid green'}]\"/>\n        </form>\n        <div id=\"app\"></div>\n    </ValidationObserver>\n\n</template>\n\n<script>\n    import {extend, ValidationObserver, ValidationProvider} from \"vee-validate\";\n    import {email, numeric, required} from \"vee-validate/dist/rules\";\n    import {captchaDataVar, captchaRender, captchaResponse, captchaReady} from \"../utils/custom\";\n    // import Notifications from 'vue-notification/dist/ssr.js'\n\n\n    extend(\"fullName\", {\n        ...required,\n        message: \"Full Name is required\",\n    });\n    extend(\"emailId\", {\n        ...required,\n        message: \"Email Id is required\",\n    });\n    extend(\"email\", {\n        ...email,\n        message: \"Enter a valid email\",\n    });\n    extend(\"numeric\", {\n        ...numeric,\n        message: \"Enter a valid Phone Number\",\n    });\n    extend(\"Phone\", {\n        ...required,\n        message: \"Phone Number is required\",\n    });\n\n    export default {\n        name: \"ContactForm\",\n        props: {\n            item: {title: \"test success\"},\n            messageData: String,\n        },\n        components: {\n            ValidationProvider,\n            ValidationObserver,\n        },\n        data() {\n            return {\n                formKey: 898888888,\n                dateKey: new Date().getMinutes(),\n                captchaToken: \"\",\n                contact: {full_name: \"\", email: \"\", mobile: \"\"},\n                valueKey: \"\",\n                isError: false,\n                ...captchaDataVar\n\n            };\n        },\n\n        mounted() {\n\n            let localThis = this;\n            this.checkingInterval = setInterval(function () {\n                if (window.grecaptcha) {\n                    localThis.captchaReady = true\n                }\n            }, 500);\n\n        },\n        watch: {\n            captchaReady\n        },\n        methods: {\n            captchaResponse,\n            captchaRender,\n            async onSubmitData() {\n                this.contact = {\n                    full_name: this.contact.full_name,\n                    email: this.contact.email,\n                    mobile: this.contact.mobile,\n                    recaptcha: this.captchaToken,\n                    // recaptcha:grecaptcha.getResponse()\n                };\n                console.log(this.contact);\n                this.$emit(\"onContactFormSubmit\", this.contact);\n                setTimeout(() => {\n                    if (this.messageData === \"Successs save\") {\n                        this.isError = false;\n                        this.showToast();\n                    } else {\n                        this.isError = true;\n                        this.showErrorToast(this.messageData);\n                    }\n                }, 1000);\n                this.contact = {};\n                this.$refs.observer.reset();\n            },\n\n            showToast() {\n                this.$notify({\n                    type: \"success\",\n                    group: \"foo\",\n                    title: \"Contact Form\",\n                    duration: 3000,\n                    width: \"200px\",\n                    position: \"center\",\n                    text: \"Successfully submitted Contact Form!\",\n                });\n            },\n            showErrorToast(value) {\n                this.$notify({\n                    type: \"error\",\n                    group: \"foo\",\n                    title: \"Failed\",\n                    duration: 3000,\n                    width: \"200px\",\n                    position: \"center\",\n                    text: value,\n                });\n            },\n\n\n            acceptNumber() {\n                var x = this.valueKey\n                    .replace(/\\D/g, \"\")\n                    .match(/(\\d{0,3})(\\d{0,3})(\\d{0,4})/);\n                this.value = !x[2]\n                    ? x[1]\n                    : \"(\" + x[1] + \") \" + x[2] + (x[3] ? \"-\" + x[3] : \"\");\n            },\n            isLetter(e) {\n                let char = String.fromCharCode(e.keyCode); // Get the character\n                if (/^[A-Za-z]+$/.test(char)) return true;\n                // Match with regex\n                else e.preventDefault(); // If not match, don't add to input text\n            },\n        },\n    };\n</script>\n<style scoped>\n    .vue-notification-group {\n        margin-top: 20px;\n        position: relative;\n    }\n\n    .vue-notification {\n        /* padding: 10px; */\n        margin: 0 5px 5px;\n        font-size: 12px;\n        margin-right: 25%;\n        color: #ffffff;\n        background: #44a4fc;\n        border-left: 5px solid #187fe7;\n        width: 300px !important;\n        top: 10px !important;\n        right: 0px !important;\n        margin-bottom: 21px !important;\n    }\n\n    .error-message {\n        color: #bd0000;\n    }\n\n</style>\n"],"sourceRoot":"src/components"}]}