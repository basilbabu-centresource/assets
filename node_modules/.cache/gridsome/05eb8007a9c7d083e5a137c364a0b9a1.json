{"remainingRequest":"/home/blesy/Desktop/assets/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/blesy/Desktop/assets/src/pages/Careers Apply.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/blesy/Desktop/assets/src/pages/Careers Apply.vue","mtime":1619525747649},{"path":"/home/blesy/Desktop/assets/node_modules/cache-loader/dist/cjs.js","mtime":1619525890957},{"path":"/home/blesy/Desktop/assets/node_modules/babel-loader/lib/index.js","mtime":1619525890949},{"path":"/home/blesy/Desktop/assets/node_modules/cache-loader/dist/cjs.js","mtime":1619525890957},{"path":"/home/blesy/Desktop/assets/node_modules/vue-loader/lib/index.js","mtime":1619525893783}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Articles from \"~/components/Articles\";\nimport { getMetaTags } from \"~/utils/seo\";\nimport { getStrapiMedia } from \"~/utils/medias\";\n\nimport { extend, ValidationObserver, ValidationProvider } from \"vee-validate\";\nimport { email, numeric, required, ext } from \"vee-validate/dist/rules\";\nimport Loading from \"vue-loading-overlay\";\n\nconst axios = require(\"axios\");\n\nextend(\"ext\", {\n  ...ext,\n  message: \"Please upload valid Resume Document\",\n});\nextend(\"FullName\", {\n  ...required,\n  message: \"Full Name is required\",\n});\nextend(\"EmailId\", {\n  ...required,\n  message: \"Email Id is required\",\n});\nextend(\"email\", {\n  ...email,\n  message: \"Enter a valid Email Id\",\n});\nextend(\"mobileNo\", {\n  ...required,\n  message: \"Mobile Number is required\",\n});\nextend(\"Country\", {\n  ...required,\n  message: \"Country Name is required\",\n});\nextend(\"Address\", {\n  ...required,\n  message: \"Address is required\",\n});\nextend(\"School\", {\n  ...required,\n  message: \"School is required\",\n});\nextend(\"Degree\", {\n  ...required,\n  message: \"Degree is required\",\n});\nextend(\"Resume\", {\n  ...required,\n  message: \"Resume is required\",\n});\n\nextend(\"numeric\", {\n  ...numeric,\n  message: \"Enter a valid Phone Number\",\n});\nextend(\"file\", {\n  message: \"Not a image file\",\n  validate: (value) => {\n    console.log(\"value=\", value);\n    return false; //Test the regex. Test function returns a true or false value.\n  },\n});\n\nexport default {\n  components: {\n    Articles,\n    ValidationProvider,\n    ValidationObserver,\n  },\n  data() {\n    return {\n      listshow: {\n        \"margin-left\": \"500px!important\",\n      },\n      // formData: null,\n      careers: {\n        fullname: \"\",\n        email: \"\",\n        mobile: \"\",\n        country: \"\",\n        address: \"\",\n        school: \"\",\n        degree: \"\",\n      },\n      resumesError: \"\",\n      isLoading: false,\n      isSuccess: false,\n      responseData: undefined,\n      errorResponse: undefined,\n      isError:false\n    };\n  },\n  mounted() {\n    let hypothesisScript = document.createElement(\"script\");\n    hypothesisScript.setAttribute(\n      \"src\",\n      \"https://www.google.com/recaptcha/api.js\"\n    );\n    document.body.appendChild(hypothesisScript);\n  },\n  methods: {\n    // CHANGE FOR FORMDATA\n    async filesChange(target, validate) {\n      let fieldName = target.name,\n        file = target.files;\n      console.log(\"name-->\", fieldName + \"data\", file[0]);\n      var valid = await validate(file[0]);\n\n      if (valid.valid) {\n        //  this.formData.append(fieldName, file[0], file[0].name);\n      }\n    },\n    async savecareer() {\n      // const axios = require('axios')\n\n      // for form data\n      this.isLoading = true;\n      const formElement = document.querySelector(\"form\");\n      const request = new XMLHttpRequest();\n      var formData = new FormData();\n      const formElements = formElement.elements;\n      const data = {};\n\n      for (let i = 0; i < formElements.length; i++) {\n        const currentElement = formElements[i];\n        if (![\"submit\", \"file\"].includes(currentElement.type)) {\n          if (currentElement.value)\n            data[currentElement.name] = currentElement.value;\n        } else if (currentElement.type === \"file\") {\n          if (currentElement.files.length === 1) {\n            const file = currentElement.files[0];\n            formData.append(`files.${currentElement.name}`, file, file.name);\n          } else {\n            for (let i = 0; i < currentElement.files.length; i++) {\n              const file = currentElement.files[i];\n              formData.append(`files.${currentElement.name}`, file, file.name);\n            }\n          }\n        }\n      }\n      recaptcha = grecaptcha.getResponse();\n      formData.recaptcha = recaptcha;\n      formData.append(\"data\", JSON.stringify(data));\n      var result = await axios\n        .post(getStrapiMedia(\"/careers-listings\"), formData)\n        .then((response) => {\n          this.responseData = response.status;\n          if (this.responseData == 200) {\n            this.isError=false;\n             this.showToast();\n          }\n        })\n        .catch((err) => {\n          this.errorResponse = err.response.data.message;\n          this.isError=true\n          this.showErrorToast();\n        });\n    },\n    showToast() {\n      this.$notify({\n        type: \"success\",\n        group: \"foo\",\n        title: \"Career Form\",\n        duration: 3000,\n        width: \"200px\",\n        position: \"center\",\n        text: \"Successfully submitted Career Form!\",\n      });\n    },\n    showErrorToast() {\n      this.$notify({\n        type: \"error\",\n        group: \"foo\",\n        title: \"Failed\",\n        duration: 3000,\n        width: \"200px\",\n        position: \"center\",\n        text: this.errorResponse,\n      });\n    },\n    isLetter(e) {\n      let char = String.fromCharCode(e.keyCode); // Get the character\n      if (/^[A-Za-z]+$/.test(char)) return true;\n      // Match with regex\n      else e.preventDefault(); // If not match, don't add to input text\n    },\n  },\n  metaInfo() {\n    const { defaultSeo, favicon } = this.$page.strapi.global;\n\n    // Merge default and article-specific SEO data\n    const fullSeo = {\n      ...defaultSeo,\n    };\n\n    return {\n      title: fullSeo.metaTitle,\n      meta: getMetaTags(fullSeo),\n      link: [\n        {\n          rel: \"favicon\",\n          href: getStrapiMedia(favicon.url),\n        },\n      ],\n    };\n  },\n};\n",{"version":3,"sources":["Careers Apply.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"Careers Apply.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <Layout>\n    <section class=\"careers-apply-section pt-50 mb-70\">\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-md-12 text-left\">\n            <h1 class=\"mb-30\">Apply for Content Writer Post</h1>\n          </div>\n          <div class=\"col-md-12\">\n            <ValidationObserver v-slot=\"{ handleSubmit }\" ref=\"observer\">\n              <form\n                action=\"\"\n                enctype=\"multipart/form-data\"\n                @submit.prevent=\"handleSubmit(savecareer)\"\n              >\n                <h2 class=\"mb-25\">Enter your personal details</h2>\n                <div class=\"row\">\n                  <div class=\"col-md-3 field-outer\">\n                    <validation-provider rules=\"FullName\" v-slot=\"{ errors }\">\n                      <label>Full Name</label><br />\n                      <input\n                        type=\"text\"\n                        name=\"fullname\"\n                        v-model=\"careers.fullname\"\n                        v-on:keypress=\"isLetter($event)\"\n                        maxlength=\"30\"\n                      />\n                      <span class=\"error-message\">{{ errors[0] }}</span>\n                    </validation-provider>\n                  </div>\n                  <div class=\"col-md-3 field-outer\">\n                    <validation-provider\n                      rules=\"EmailId|email\"\n                      v-slot=\"{ errors }\"\n                    >\n                      <label>Email</label><br />\n                      <input\n                        type=\"email\"\n                        name=\"email\"\n                        v-model=\"careers.email\"\n                        maxlength=\"30\"\n                      />\n                      <span class=\"error-message\">{{ errors[0] }}</span>\n                    </validation-provider>\n                  </div>\n                  <div class=\"col-md-3 field-outer\">\n                    <validation-provider\n                      rules=\"mobileNo|numeric\"\n                      v-slot=\"{ errors }\"\n                    >\n                      <label>Mobile</label><br />\n                      <input\n                        type=\"text\"\n                        name=\"mobile\"\n                        v-model=\"careers.mobile\"\n                        maxlength=\"10\"\n                      />\n                      <span class=\"error-message\">{{ errors[0] }}</span>\n                    </validation-provider>\n                  </div>\n                  <div class=\"col-md-3 field-outer\">\n                    <validation-provider rules=\"Country\" v-slot=\"{ errors }\">\n                      <label>Country</label><br />\n                      <input\n                        type=\"text\"\n                        name=\"country\"\n                        v-model=\"careers.country\"\n                        maxlength=\"30\"\n                        v-on:keypress=\"isLetter($event)\"\n                      />\n                      <span class=\"error-message\">{{ errors[0] }}</span>\n                    </validation-provider>\n                  </div>\n                </div>\n                <div class=\"row\">\n                  <div class=\"col-md-3 field-outer\">\n                    <validation-provider rules=\"Address\" v-slot=\"{ errors }\">\n                      <label>Address</label><br />\n                      <textarea\n                        name=\"address\"\n                        v-model=\"careers.address\"\n                        maxlength=\"100\"\n                      ></textarea>\n                      <span class=\"error-message\">{{ errors[0] }}</span>\n                    </validation-provider>\n                  </div>\n                </div>\n\n                <div class=\"row\">\n                  <div class=\"col-md-12\">\n                    <h2 class=\"mt-10 mb-25\">Educational Qualification</h2>\n                  </div>\n                </div>\n                <div class=\"row\">\n                  <div class=\"col-md-3 field-outer\">\n                    <validation-provider rules=\"School\" v-slot=\"{ errors }\">\n                      <label>School</label><br />\n                      <input\n                        type=\"text\"\n                        name=\"school\"\n                        v-model=\"careers.school\"\n                        maxlength=\"30\"\n                      />\n                      <span class=\"error-message\">{{ errors[0] }}</span>\n                    </validation-provider>\n                  </div>\n                  <div class=\"col-md-3 field-outer\">\n                    <validation-provider rules=\"Degree\" v-slot=\"{ errors }\">\n                      <label>Degree</label><br />\n                      <input\n                        type=\"text\"\n                        name=\"degree\"\n                        v-model=\"careers.degree\"\n                        maxlength=\"30\"\n                      />\n                      <span class=\"error-message\">{{ errors[0] }}</span>\n                    </validation-provider>\n                  </div>\n                  <div class=\"col-md-3\">\n                    <validation-provider rules=\"\" v-slot=\"{ errors }\">\n                      <label>Post Graduation (if any)</label><br />\n                      <input\n                        type=\"text\"\n                        name=\"post_graduation\"\n                        v-model=\"careers.post_graduation\"\n                        maxlength=\"30\"\n                      />\n                      <span class=\"error-message\">{{ errors[0] }}</span>\n                    </validation-provider>\n                  </div>\n                </div>\n                <div class=\"row\">\n                  <div class=\"col-md-3 field-outer\">\n                    <validation-provider rules=\"\" v-slot=\"{ errors }\">\n                      <label>Additional Certification (if any)</label><br />\n                      <textarea\n                        name=\"additional_certification\"\n                        v-model=\"careers.additional_certification\"\n                        maxlength=\"100\"\n                      ></textarea>\n                      <span class=\"error-message\">{{ errors[0] }}</span>\n                    </validation-provider>\n                  </div>\n                </div>\n                <div class=\"col-md-3 field-outer\">\n                  <div\n                    class=\"g-recaptcha\"\n                    data-sitekey=\"6Le8s7caAAAAAGyCdG2T61FMj9h6abRnsog5ZWGQ\"\n                  ></div>\n                </div>\n                <!-- <div class=\"row mt-20\">\n                                    <div class=\"col-md-12 upload\">\n                                        <label>Upload your Resume</label><br>\n                                         <input\n                                         type=\"file\"\n                                          name=\"resume\"\n                                           class=\"lp-file\"\n                                           @change=\"filesChange($event.target)\"\n                                            accept=\"image/*\"\n                                           />\n                                       <input type=\"file\" name=\"resume\" class=\"career-file\" ref=\"resume\" id=\"resume\"\n                                               v-on:change=\"handleFileUpload()\"/>   \n                                    </div>\n                                </div> -->\n                <div class=\"row mt-20\">\n                  <div class=\"col-md-12 upload\">\n                    <validation-provider\n                      rules=\"ext:jpg,png,jpeg|Resume\"\n                      v-slot=\"{ errors, validate }\"\n                    >\n                      <label class=\"mb-12\">Upload your Resume</label>\n                      <input\n                        type=\"file\"\n                        name=\"resume\"\n                        class=\"lp-file\"\n                        @change=\"filesChange($event.target, validate)\"\n                        accept=\"image/*\"\n                      />\n\n                      <span class=\"error-message\">{{ errors[0] }}</span>\n                    </validation-provider>\n                  </div>\n                </div>\n                <div class=\"row mt-50\">\n                  <div class=\"col-md-12 text-center\">\n                    <input type=\"submit\" value=\"Send Application\" />\n                    <!-- <notifications\n                      group=\"foo\"\n                      classes=\"vue-notification\"\n                      :style=\"listshow\"\n                    /> -->\n                    <!-- <notifications group=\"foo\" :style=\"[isError ?{'color': '#960909'}:{'color':'green'}]\"/> -->\n                  <notifications group=\"foo\" class=\"vue-notification\" :style=\"[isError ?{'background': '#960909','border-left': '5px solid #960909'}:{'background':'green','border-left': '5px solid green'}]\"/>\n                  </div>\n                </div>\n              </form>\n            </ValidationObserver>\n          </div>\n        </div>\n      </div>\n    </section>\n  </Layout>\n</template>\n\n<page-query>\n    query {\n    strapi {\n    global {\n    siteName\n    favicon {\n    url\n    }\n    defaultSeo {\n    metaTitle\n    metaDescription\n    shareImage {\n    url\n    }\n    }\n    }\n    articles(where: { status: \"published\" }) {\n    slug\n    title\n    category {\n    name\n    }\n    image {\n    url\n    }\n    author {\n    name\n    picture {\n    url\n    }\n    }\n    }\n    }\n    }\n</page-query>\n\n<script>\nimport Articles from \"~/components/Articles\";\nimport { getMetaTags } from \"~/utils/seo\";\nimport { getStrapiMedia } from \"~/utils/medias\";\n\nimport { extend, ValidationObserver, ValidationProvider } from \"vee-validate\";\nimport { email, numeric, required, ext } from \"vee-validate/dist/rules\";\nimport Loading from \"vue-loading-overlay\";\n\nconst axios = require(\"axios\");\n\nextend(\"ext\", {\n  ...ext,\n  message: \"Please upload valid Resume Document\",\n});\nextend(\"FullName\", {\n  ...required,\n  message: \"Full Name is required\",\n});\nextend(\"EmailId\", {\n  ...required,\n  message: \"Email Id is required\",\n});\nextend(\"email\", {\n  ...email,\n  message: \"Enter a valid Email Id\",\n});\nextend(\"mobileNo\", {\n  ...required,\n  message: \"Mobile Number is required\",\n});\nextend(\"Country\", {\n  ...required,\n  message: \"Country Name is required\",\n});\nextend(\"Address\", {\n  ...required,\n  message: \"Address is required\",\n});\nextend(\"School\", {\n  ...required,\n  message: \"School is required\",\n});\nextend(\"Degree\", {\n  ...required,\n  message: \"Degree is required\",\n});\nextend(\"Resume\", {\n  ...required,\n  message: \"Resume is required\",\n});\n\nextend(\"numeric\", {\n  ...numeric,\n  message: \"Enter a valid Phone Number\",\n});\nextend(\"file\", {\n  message: \"Not a image file\",\n  validate: (value) => {\n    console.log(\"value=\", value);\n    return false; //Test the regex. Test function returns a true or false value.\n  },\n});\n\nexport default {\n  components: {\n    Articles,\n    ValidationProvider,\n    ValidationObserver,\n  },\n  data() {\n    return {\n      listshow: {\n        \"margin-left\": \"500px!important\",\n      },\n      // formData: null,\n      careers: {\n        fullname: \"\",\n        email: \"\",\n        mobile: \"\",\n        country: \"\",\n        address: \"\",\n        school: \"\",\n        degree: \"\",\n      },\n      resumesError: \"\",\n      isLoading: false,\n      isSuccess: false,\n      responseData: undefined,\n      errorResponse: undefined,\n      isError:false\n    };\n  },\n  mounted() {\n    let hypothesisScript = document.createElement(\"script\");\n    hypothesisScript.setAttribute(\n      \"src\",\n      \"https://www.google.com/recaptcha/api.js\"\n    );\n    document.body.appendChild(hypothesisScript);\n  },\n  methods: {\n    // CHANGE FOR FORMDATA\n    async filesChange(target, validate) {\n      let fieldName = target.name,\n        file = target.files;\n      console.log(\"name-->\", fieldName + \"data\", file[0]);\n      var valid = await validate(file[0]);\n\n      if (valid.valid) {\n        //  this.formData.append(fieldName, file[0], file[0].name);\n      }\n    },\n    async savecareer() {\n      // const axios = require('axios')\n\n      // for form data\n      this.isLoading = true;\n      const formElement = document.querySelector(\"form\");\n      const request = new XMLHttpRequest();\n      var formData = new FormData();\n      const formElements = formElement.elements;\n      const data = {};\n\n      for (let i = 0; i < formElements.length; i++) {\n        const currentElement = formElements[i];\n        if (![\"submit\", \"file\"].includes(currentElement.type)) {\n          if (currentElement.value)\n            data[currentElement.name] = currentElement.value;\n        } else if (currentElement.type === \"file\") {\n          if (currentElement.files.length === 1) {\n            const file = currentElement.files[0];\n            formData.append(`files.${currentElement.name}`, file, file.name);\n          } else {\n            for (let i = 0; i < currentElement.files.length; i++) {\n              const file = currentElement.files[i];\n              formData.append(`files.${currentElement.name}`, file, file.name);\n            }\n          }\n        }\n      }\n      recaptcha = grecaptcha.getResponse();\n      formData.recaptcha = recaptcha;\n      formData.append(\"data\", JSON.stringify(data));\n      var result = await axios\n        .post(getStrapiMedia(\"/careers-listings\"), formData)\n        .then((response) => {\n          this.responseData = response.status;\n          if (this.responseData == 200) {\n            this.isError=false;\n             this.showToast();\n          }\n        })\n        .catch((err) => {\n          this.errorResponse = err.response.data.message;\n          this.isError=true\n          this.showErrorToast();\n        });\n    },\n    showToast() {\n      this.$notify({\n        type: \"success\",\n        group: \"foo\",\n        title: \"Career Form\",\n        duration: 3000,\n        width: \"200px\",\n        position: \"center\",\n        text: \"Successfully submitted Career Form!\",\n      });\n    },\n    showErrorToast() {\n      this.$notify({\n        type: \"error\",\n        group: \"foo\",\n        title: \"Failed\",\n        duration: 3000,\n        width: \"200px\",\n        position: \"center\",\n        text: this.errorResponse,\n      });\n    },\n    isLetter(e) {\n      let char = String.fromCharCode(e.keyCode); // Get the character\n      if (/^[A-Za-z]+$/.test(char)) return true;\n      // Match with regex\n      else e.preventDefault(); // If not match, don't add to input text\n    },\n  },\n  metaInfo() {\n    const { defaultSeo, favicon } = this.$page.strapi.global;\n\n    // Merge default and article-specific SEO data\n    const fullSeo = {\n      ...defaultSeo,\n    };\n\n    return {\n      title: fullSeo.metaTitle,\n      meta: getMetaTags(fullSeo),\n      link: [\n        {\n          rel: \"favicon\",\n          href: getStrapiMedia(favicon.url),\n        },\n      ],\n    };\n  },\n};\n</script>\n\n<style scoped>\n.vue-notification-group {\n  margin-top: 20px;\n  position: relative;\n}\n.vue-notification {\n  /* padding: 10px; */\n  margin: 0 5px 5px;\n\n  font-size: 12px;\n  margin-right: 25%;\n  color: #ffffff;\n  background: #44a4fc;\n  border-left: 5px solid #187fe7;\n  width: 300px!important;\n  top: 10px!important;\n  right: 0px!important;\n  margin-bottom: 21px!important;\n  margin-left: 496px!important;\n}\n.error-message {\n  color: #bd0000;\n}\n</style>\n"]}]}