{"remainingRequest":"/home/blesy/Desktop/assets/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/blesy/Desktop/assets/src/components/ContactFormPopup.vue?vue&type=style&index=0&id=69213238&scoped=true&lang=css&","dependencies":[{"path":"/home/blesy/Desktop/assets/src/components/ContactFormPopup.vue","mtime":1619525747649},{"path":"/home/blesy/Desktop/assets/node_modules/css-loader/dist/cjs.js","mtime":1619525891213},{"path":"/home/blesy/Desktop/assets/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1619525893783},{"path":"/home/blesy/Desktop/assets/node_modules/postcss-loader/src/index.js","mtime":1619252999810},{"path":"/home/blesy/Desktop/assets/node_modules/cache-loader/dist/cjs.js","mtime":1619525890957},{"path":"/home/blesy/Desktop/assets/node_modules/vue-loader/lib/index.js","mtime":1619525893783}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.vue-notification-group {\n    margin-top: 20px;\n    position: relative;\n}\n\n.vue-notification {\n    /* padding: 10px; */\n    margin: 0 5px 5px;\n\n    font-size: 12px;\n    margin-right: 25%;\n    color: #ffffff;\n    background: #44a4fc;\n    border-left: 5px solid #187fe7;\n    width: 300px !important;\n    top: 10px !important;\n    right: 0px !important;\n    margin-bottom: 21px !important;\n}\n\n.error-message {\n    color: #bd0000;\n}\n",{"version":3,"sources":["ContactFormPopup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwMA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"ContactFormPopup.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <ValidationObserver v-slot=\"{ handleSubmit }\" ref=\"observer\">\n        <form action=\"\" @submit.prevent=\"handleSubmit(onSubmitData)\">\n            <validation-provider rules=\"fullName\" v-slot=\"{ errors }\">\n                <div class=\"field-outer\">\n                    <input\n                            type=\"text\"\n                            v-model=\"contact.full_name\"\n                            name=\"full_name\"\n                            placeholder=\"Your Full Name\"\n                            maxlength=\"20\"\n                            v-on:keypress=\"isLetter($event)\"\n                    />\n                    <span class=\"error-message\">{{ errors[0] }}</span>\n                </div>\n            </validation-provider>\n\n            <validation-provider rules=\"EmailId|email\" v-slot=\"{ errors }\">\n                <div class=\"field-outer\">\n                    <input\n                            v-model=\"contact.email\"\n                            name=\"email\"\n                            type=\"email\"\n                            placeholder=\"Your Email Address\"\n                            maxlength=\"30\"\n                    />\n                    <span class=\"error-message\">{{ errors[0] }}</span>\n                </div>\n            </validation-provider>\n\n            <validation-provider rules=\"PhoneNo|numeric\" v-slot=\"{ errors }\">\n                <div class=\"field-outer\">\n                    <input\n                            v-model=\"contact.mobile\"\n                            name=\"mobile\"\n                            type=\"text\"\n                            placeholder=\"Your Phone Number\"\n                            maxlength=\"10\"\n                            @input=\"acceptNumber\"\n                    />\n                    <span class=\"error-message\">{{ errors[0] }}</span>\n                </div>\n            </validation-provider>\n\n            <validation-provider rules=\"Message\" v-slot=\"{ errors }\">\n                <div class=\"field-outer\">\n                    <input\n                            v-model=\"contact.message\"\n                            name=\"message\"\n                            type=\"text\"\n                            placeholder=\"Your Message\"\n                            maxlength=\"50\"\n                    />\n                    <span class=\"error-message\">{{ errors[0] }}</span>\n                </div>\n            </validation-provider>\n            <div class=\"field-outer\">\n                <div :id=\"'g-captcha-contact-form' + formKey\"></div>\n            </div>\n            <input type=\"submit\" value=\"Submit\"/>\n            <!-- <ClientOnly>\n          <notifications group=\"foo\" classes=\"vue-notification\" />\n          </ClientOnly> -->\n            <notifications group=\"foo\" class=\"vue-notification\"\n                           :style=\"[isError ?{'background': '#960909','border-left': '5px solid #960909'}:{'background':'green','border-left': '5px solid green'}]\"/>\n            <!-- <notifications group=\"foo\" :style=\"[isError ?{'color': '#960909'}:{'color':'green'}]\"/> -->\n        </form>\n    </ValidationObserver>\n</template>\n\n<script>\n    import {extend, ValidationObserver, ValidationProvider} from \"vee-validate\";\n    import {email, numeric, required} from \"vee-validate/dist/rules\";\n    import {captchaDataVar, captchaReady, captchaResponse, captchaRender} from \"../utils/custom\";\n\n    extend(\"fullName\", {\n        ...required,\n        message: \"Full Name is required\",\n    });\n    extend(\"EmailId\", {\n        ...required,\n        message: \"Email Id is required\",\n    });\n    extend(\"email\", {\n        ...email,\n        message: \"Enter a valid Email Id\",\n    });\n    extend(\"PhoneNo\", {\n        ...required,\n        message: \"Phone Number is required\",\n    });\n    extend(\"Message\", {\n        ...required,\n        message: \"Message is required\",\n    });\n    extend(\"numeric\", {\n        ...numeric,\n        message: \"Enter a valid Phone Number\",\n    });\n\n    export default {\n        name: \"ContactFormPopUp\",\n        components: {\n            ValidationProvider,\n            ValidationObserver,\n        },\n        props: {\n            messageData: String,\n            formKey: String,\n        },\n        data() {\n            return {\n                captchaToken: \"\",\n                contact: {full_name: \"\", email: \"\", mobile: \"\", message: \"\"},\n                valueKey: \"\",\n                isError: false,\n                ...captchaDataVar\n            };\n        },\n        mounted() {\n\n            let localThis = this\n            this.checkingInterval = setInterval(function () {\n                console.log('checking grecaptcha loaded or not');\n                if (grecaptcha) {\n                    localThis.captchaReady = true\n                }\n            }, 500);\n\n\n        },\n        watch: {\n            captchaReady\n        },\n        methods: {\n            captchaResponse,\n            captchaRender,\n            async onSubmitData() {\n                this.contact = {\n                    full_name: this.contact.full_name,\n                    email: this.contact.email,\n                    mobile: this.contact.mobile,\n                    message: this.contact.message,\n                    recaptcha: this.captchaToken,\n                };\n                console.log(this.contact);\n                this.$emit(\"onContactFormSubmit\", this.contact);\n                setTimeout(() => {\n                    console.log(\"res from popup\", this.messageData);\n                    if (this.messageData === \"Successs save\") {\n                        this.isError = false;\n                        this.showToast();\n                    } else {\n                        this.isError = true;\n                        this.showErrorToast(this.messageData);\n                    }\n                }, 1000);\n                this.contact = {};\n                this.$refs.observer.reset();\n            },\n            showToast() {\n                this.$notify({\n                    type: \"success\",\n                    group: \"foo\",\n                    title: \"Contact Form\",\n                    duration: 3000,\n                    width: \"200px\",\n                    position: \"center\",\n                    text: \"Successfully submitted Contact Form!\",\n                });\n            },\n            showErrorToast(value) {\n                this.$notify({\n                    type: \"error\",\n                    group: \"foo\",\n                    title: \"Failed\",\n                    duration: 3000,\n                    width: \"200px\",\n                    position: \"center\",\n                    text: value,\n                });\n            },\n            acceptNumber() {\n                var x = this.valueKey\n                    .replace(/\\D/g, \"\")\n                    .match(/(\\d{0,3})(\\d{0,3})(\\d{0,4})/);\n                this.value = !x[2]\n                    ? x[1]\n                    : \"(\" + x[1] + \") \" + x[2] + (x[3] ? \"-\" + x[3] : \"\");\n            },\n            isLetter(e) {\n                let char = String.fromCharCode(e.keyCode); // Get the character\n                if (/^[A-Za-z]+$/.test(char)) return true;\n                // Match with regex\n                else e.preventDefault(); // If not match, don't add to input text\n            }\n        },\n    };\n</script>\n<style scoped>\n    .vue-notification-group {\n        margin-top: 20px;\n        position: relative;\n    }\n\n    .vue-notification {\n        /* padding: 10px; */\n        margin: 0 5px 5px;\n\n        font-size: 12px;\n        margin-right: 25%;\n        color: #ffffff;\n        background: #44a4fc;\n        border-left: 5px solid #187fe7;\n        width: 300px !important;\n        top: 10px !important;\n        right: 0px !important;\n        margin-bottom: 21px !important;\n    }\n\n    .error-message {\n        color: #bd0000;\n    }\n</style>\n"]}]}